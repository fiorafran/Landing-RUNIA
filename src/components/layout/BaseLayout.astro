---
export interface Props {
  title: string;
  description: string;
  image?: string;
  canonical?: string;
  type?: 'website' | 'article';
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  section?: string;
  tags?: string[];
}

const {
  title,
  description,
  image = '/images/og-image.jpg',
  canonical,
  type = 'website',
  publishedTime,
  modifiedTime,
  author = 'Chatbots IA',
  section,
  tags = ['chatbots', 'inteligencia artificial', 'automatización', 'whatsapp']
} = Astro.props;

const siteUrl = 'https://chatbotsia.com';
const fullUrl = canonical ? `${siteUrl}${canonical}` : siteUrl;
const fullImageUrl = image.startsWith('http') ? image : `${siteUrl}${image}`;

// Structured data
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": "Chatbots IA",
  "url": siteUrl,
  "logo": `${siteUrl}/images/logo.svg`,
  "description": "Creamos chatbots con inteligencia artificial que automatizan tus procesos, reducen costos y escalan tu atención al cliente sin esfuerzo.",
  "address": {
    "@type": "PostalAddress",
    "addressLocality": "Buenos Aires",
    "addressCountry": "AR"
  },
  "contactPoint": {
    "@type": "ContactPoint",
    "telephone": "+54-11-1234-5678",
    "contactType": "customer service",
    "email": "contacto@chatbotsia.com"
  },
  "sameAs": [
    "https://twitter.com/chatbotsia",
    "https://facebook.com/chatbotsia",
    "https://instagram.com/chatbotsia"
  ]
};
---

<!DOCTYPE html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={tags.join(', ')} />
    <meta name="author" content={author} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={fullUrl} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={fullImageUrl} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content="Chatbots IA" />
    <meta property="og:locale" content="es_AR" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={fullUrl} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={fullImageUrl} />
    <meta property="twitter:creator" content="@chatbotsia" />
    <meta property="twitter:site" content="@chatbotsia" />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={fullUrl} />
    
    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="googlebot" content="index, follow" />
    <meta name="theme-color" content="#2563eb" />
    <meta name="msapplication-TileColor" content="#2563eb" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Chatbots IA" />
    
    <!-- Article specific meta tags -->
    {type === 'article' && publishedTime && (
      <meta property="article:published_time" content={publishedTime} />
    )}
    {type === 'article' && modifiedTime && (
      <meta property="article:modified_time" content={modifiedTime} />
    )}
    {type === 'article' && author && (
      <meta property="article:author" content={author} />
    )}
    {type === 'article' && section && (
      <meta property="article:section" content={section} />
    )}
    {type === 'article' && tags.length > 0 && (
      tags.map(tag => <meta property="article:tag" content={tag} />)
    )}
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Preload critical resources -->
    <link rel="preload" href="/fonts/inter-var.woff2" as="font" type="font/woff2" crossorigin />
    
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    
    <!-- Additional structured data for service -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Service",
      "name": "Chatbots con Inteligencia Artificial",
      "description": "Servicios de desarrollo de chatbots inteligentes para WhatsApp Business y otras plataformas",
      "provider": {
        "@type": "Organization",
        "name": "Chatbots IA"
      },
      "areaServed": {
        "@type": "Country",
        "name": "Argentina"
      },
      "serviceType": "Chatbot Development",
      "category": "Artificial Intelligence",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "ARS",
        "description": "Consulta gratuita sin compromiso"
      }
    })} />
  </head>
  <body class="antialiased">
    <slot />
    
    <!-- Analytics Components -->
    <!-- Google Analytics (descomentar y configurar cuando tengas el ID) -->
    <!-- <script async src="https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-XXXXXXXXXX');
    </script> -->
    
    <!-- Performance optimization -->
    <script>
      // Preload critical resources
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then(registration => console.log('SW registered'))
            .catch(error => console.log('SW registration failed'));
        });
      }
      
      // Lazy load images
      if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const img = entry.target as HTMLImageElement;
              if (img.dataset.src) {
                img.src = img.dataset.src;
                img.classList.remove('lazy');
                imageObserver.unobserve(img);
              }
            }
          });
        });
        
        document.querySelectorAll('img[data-src]').forEach(img => {
          imageObserver.observe(img);
        });
      }

      // Simple event tracking
      document.addEventListener('DOMContentLoaded', () => {
        // Track page view
        console.log('Page loaded:', window.location.pathname);
        
        // Track form submissions
        const forms = document.querySelectorAll('form');
        forms.forEach(form => {
          form.addEventListener('submit', () => {
            console.log('Form submitted:', form.id || 'contact_form');
          });
        });
        
        // Track button clicks
        document.addEventListener('click', (e) => {
          const target = e.target as Element;
          if (target.matches('button, a[href], .btn')) {
            console.log('Button clicked:', target.textContent?.trim());
          }
        });
      });
    </script>
  </body>
</html> 